{
  "name": "cbify",
  "version": "1.0.0",
  "description": "Wraps synchronous functions with a callback-style API",
  "main": "index.js",
  "files": [
    "index.js"
  ],
  "scripts": {
    "test": "mocha",
    "prepublish": "browserify index.js --standalone cbify -o cbify.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/es128/cbify"
  },
  "keywords": [
    "callback",
    "cb",
    "sync",
    "async",
    "wrap",
    "wrapper",
    "utils",
    "return",
    "adapt",
    "convert",
    "fn",
    "function",
    "method"
  ],
  "author": {
    "name": "Elan Shanker"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/es128/cbify/issues"
  },
  "homepage": "https://github.com/es128/cbify",
  "dependencies": {
    "fn-args": "^1.0.0",
    "wrappy": "^1.0.1"
  },
  "devDependencies": {
    "browserify": "^5.12.1",
    "mocha": "^1.21.4"
  },
  "readme": "# cbify\n\nWraps synchronous functions with a callback-style API so they can match their\nasync brethren. \n\nUseful for handling both sync and async methods with the same underlying code.\nPreserves the sync-ness of the original function, making it possible to use\nvalues passed to the callback as a return value.\n\n## Install\n\n**npm**\n```sh\nnpm install --save cbify\n```\n\n**Bower**\n```sh\nbower install --save cbify\n```\nThe browser build for bower includes a UMD wrapper which adapts to various\nmodule systems, or exposes a `cbify` global if none are present.\n\n**Duo**\n```js\nvar cbify = require('es128/cbify')\n```\n\n## Usage\n\n```js\nvar cbify = require('cbify');\n\nvar sum = cbify(function (a, b) {\n\treturn a + b;\n});\n\nvar answer;\nsum(32, 96, function (err, result) {\n\tanswer = result;\n});\n\nconsole.log(answer); // 128\n// would have been undefined if `sum` had handled the callback asynchronously\n```\n\nIf provided a function whose last named argument is `cb` or `callback` (or even\nif it just contains `callback`), then that function will be returned unchanged.\n\nThe `this` context the cbify'd function is called with will be preserved\nfor the underlying function. Feel free to use `bind`, `apply`, etc as you would\nhave before implementing cbify.\n\n## Similar modules\n\nI was surprised I couldn't find a pre-existing module that did this. I did find\na few that almost did it, but were ruled out for slight differences.\n\n* [__sinless__](https://github.com/thlorenz/sinless):\n  Uses `setImmediate`, causing the wrapped function to always return\n  asynchronously, even though the underlying method may still be blocking.\n* [__ifyify__](https://github.com/Tarabyte/ifyify):\n  The `callbackify` method provided by this module is only different in that it\n  wraps the function with a continuation-style API, meaning that `err` will now\n  always be the first argument.\n* [__wrap-fn__](https://github.com/MatthewMueller/wrap-fn):\n  Another API style. Expects the callback at the time the function is being\n  wrapped so the resulting function signature stays the same.\n\n## What about [Z͡alg̨ó](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)?\n\nThis makes synchronous functions pass their result to a callback synchronously.\nIt's an important feature of this module, providing the ability to adapt some\nasync APIs to also provide a sync option with minimal code changes. This is\ndone knowingly and is consistent, so it does not release Zalgo. \n\nHowever, you do have to be careful for ͟h͞e͘ ̢Wa͜it̛s̨ ͡B̨e͡h̛in̨d ͠The̷ W͏a͝l͏ĺ.\nIf you do not know whether the functions you're passing into cbify are sync or\nasync, and you are otherwise treating them identically, then you may be\ńun͘l͜͝e҉a͟҉̨sh̕i̶͜҉n͏̧̕g̢̕ ̧T̷͞ḩe͟ ͜N̢̛͢e̛͟͠z̨͟ṕ̵̨e͟͡͏r̡̀d̨i̧̧a̢͢n ̡hi҉͜v̷e͢-̡͘͘mi̵͞nd̀ \n̡of̀ ͢͝cḩ̕a̶̶o̷͜s͘͞.҉͝. In that case, you may want to use\n[sinless](https://github.com/thlorenz/sinless) instead, or use cbify together\nwith [dezalgo](https://github.com/npm/dezalgo).\n\n## License\n\n[ISC](https://raw.github.com/es128/cbify/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "cbify@1.0.0",
  "_from": "cbify@^1.0.0"
}
