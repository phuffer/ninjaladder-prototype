{
  "name": "progeny",
  "version": "0.5.2",
  "description": "Recursively finds dependencies of style and template source files",
  "author": {
    "name": "Elan Shanker",
    "url": "http://github.com/es128"
  },
  "homepage": "https://github.com/es128/progeny",
  "repository": {
    "type": "git",
    "url": "https://github.com/es128/progeny"
  },
  "bugs": {
    "url": "https://github.com/es128/progeny/issues"
  },
  "main": "lib",
  "scripts": {
    "prepublish": "rm -rf lib && coffee --bare --output lib/ src/",
    "test": "rm -rf lib && coffee --bare --output lib/ src/ && mocha --compilers coffee:coffee-script/register"
  },
  "dependencies": {
    "async-each": "~0.1.4",
    "fs-mode": "^1.0.1"
  },
  "devDependencies": {
    "mocha": "^1.21.5",
    "coffee-script": "~1.8.0"
  },
  "readme": "progeny\n=======\nRecursively finds dependencies of style and template source files.\n\nOr configure it to do the same kind of thing with any other type of code file\nthat has an `import`-type syntax.\n\n\nUsage\n-----\n#### progeny ([config]) (path, [sourceContents], callback)\n#### progeny.Sync ([config]) (path, [sourceContents])\nCall **progeny** with an optional configuration object, it returns a reusable\nfunction. Call that function with a path to a source file (and its\nsource code if you already have it handy), and it will figure out all of that\nfile's dependencies and sub-dependencies, passing an array of them to your\ncallback. Or use the `Sync` API to get the results as a return value.\n\nExamples using `path` assume you already have `var path = require('path');`.\nYou _could_ just use strings like `'/path/to/project'`, but you may run into\ncross-compatibility issues.\n\n##### Quick and Simple\nYou can skip the config object and the source code, letting **Progeny** read\nthe source from the file itself and apply a built-in configuration based on the file extension.\n\n```javascript\nvar progeny = require('progeny');\nvar filePath = path.join('path', 'to', 'project', 'style-or-template.jade');\n\n// Async\nprogeny()(filePath, function (err, dependencies) {\n    // use the dependencies array in here\n});\n\n// Sync\nvar dependencies = progeny()(filePath);\n```\n\n##### Configuration\nThere are\n[built-in configurations](https://github.com/es128/progeny/blob/master/src/index.coffee#L7-L25)\nalready for `jade`, `stylus`, `less`, `sass`/`scss`, and `css`. Configuration\nmust be specified for any other formats. Feel free to submit Pull Requests to\nadd default types, or improve the settings for the exisiting ones.\n\n```javascript\nvar progenyConfig = {\n    // The file extension for the source code you want parsed\n    // Will be derived from the source file path if not specified\n    extension: 'styl',\n\n    // Array of multiple file extensions to try when looking for dependencies\n    extensionsList: ['scss', 'sass'],\n\n    // Regexp to run on each line of source code to match dependency references\n    // Make sure you wrap the file name part in (parentheses)\n    regexp: /^\\s*@import\\s+['\"]?([^'\"]+)['\"]?/,\n\n    // File prefix to try (in addition to the raw value matched in the regexp)\n    prefix: '_',\n\n    // Matched stuff to exclude: string, regex, or array of either/both\n    exclusion: /^compass/,\n\n    // In case a match starts with a slash, the absolute path to apply\n    rootPath: path.join('path', 'to', 'project'),\n\n    // Other paths to check for possible dependency resolution\n    altPaths: [path.join('path', 'to', 'shared'), path.join('path', 'to', 'common')]\n\n    // An array of regexps to run in series for more complex dependency parsing\n    // Useful for matching multiple dependencies from one, possibly mult-line,\n    // statement. All regexps except the last one must use the global flag.\n    multipass: [\n        /@import[^;]+;/g,\n        /\\s*['\"][^'\"]+['\"]\\s*,?/g,\n        /(?:['\"])([^'\"]+)/\n    ]\n\n    // By default the list of paths progeny provides will be limited to files\n    // actually found in the file system. Use this option to get every possible\n    // path progeny thinks a depencency could be located at.\n    potentialDeps: true\n};\n```\n\n##### More Examples\nProcess a list of files:\n\n```javascript\nvar progeny = require('progeny');\nvar getDependencies = progeny(progenyConfig);\nmyFiles.forEach( function (file) {\n    getDependencies(file.path, file.source, function (err, deps) {\n        if (err) throw new Error(err);\n        file.dependencies = deps;\n    });\n});\n```\n\nMultiple configs:\n\n```javascript\nvar getDefaultDependencies = progeny();\nvar getCustomDependencies = progeny({\n    extension: 'foo',\n    regexp: /([^\\s,]+)/\n});\n```\n\nProcess source code from a string without its file path:\n\n```javascript\nvar mySourceString; // assume this contains valid source code\nprogeny({\n    // extension and rootPath must be specified for this to work\n    // also need regexp if extension not one of the predefined ones\n    extension: 'jade',\n    rootPath: path.join('path', 'to', 'project')\n})(null, mySourceString, function (err, deps) {});\n```\n\nChange Log\n----------\n[See release notes page on GitHub](https://github.com/es128/progeny/releases)\n\nLicense\n-------\n[MIT](https://raw.github.com/es128/progeny/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "progeny@0.5.2",
  "_from": "progeny@^0.5.0"
}
