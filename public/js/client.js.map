{"version":3,"sources":["client/game.js","client/objects/PlayerObject.js","client/sprites/PlayerSprite.js","client/states/ControlsMenu.js","client/states/GameOver.js","client/states/LoadingState.js","client/states/MainMenu.js","client/states/PlayState.js","client/utils/MatchMakerManager.js","client/utils/MenuCreator.js","client/utils/NetworkManager.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlvpblEA;AAAA","file":"public/js/client.js","sourcesContent":["\"use strict\";\n\nvar gameBootstrapper = {\n    init: function(gameContainerElementId){\n\n        var game = new Phaser.Game(800, 600, Phaser.AUTO, gameContainerElementId);\n\n        game.state.add('MainMenu', require('./states/MainMenu'));\n        game.state.add('ControlsMenu', require('./states/ControlsMenu'));\n        game.state.add('LoadingState', require('./states/LoadingState'));\n        game.state.add('PlayState', require('./states/PlayState'));\n        game.state.add('GameOver', require('./states/GameOver'));\n\n        game.state.start('MainMenu');\n    }\n};\n\nmodule.exports = gameBootstrapper;\n","'use strict';\n\nvar NetworkManager = require('client/utils/NetworkManager');\nvar PlayerSprite = require('client/sprites/PlayerSprite');\n\nvar PlayerObject = function(game, x, y, isMainPlayer, properties) {\n  this.configure(game, isMainPlayer);\n  this.setupSprite(x, y, properties);\n};\n\nPlayerObject.prototype.configure = function(game, isMainPlayer) {\n  this.game = game;\n  this.isMainPlayer = isMainPlayer;\n  this.info = {};\n}\n\nPlayerObject.prototype.setupSprite = function(x, y, properties) {\n  this.sprite = new PlayerSprite(this.game, x, y, true, properties);\n  this.game.add.existing(this.sprite);\n  this.sprite.body.gravity.y = 1000;\n  this.sprite.body.allowGravity = true;\n  this.sprite.body.collideWorldBounds = true;\n}\n\n\nmodule.exports = PlayerObject;\n","'use strict';\n\nvar PlayerSprite = function(game, x, y, isCollisionEnabled, properties) {\n  Phaser.Sprite.call(this, game, x, y, 'player_spritesheet');\n  if(isCollisionEnabled) {\n    this.enableCollision();\n  }\n  this.configureProperties(properties);\n  this.setupAnimations();\n};\n\nPlayerSprite.prototype = Object.create(Phaser.Sprite.prototype);\nPlayerSprite.prototype.constructor = PlayerSprite;\n\nPlayerSprite.prototype.enableCollision = function() {\n  this.game.physics.arcade.enable(this);\n};\n\nPlayerSprite.prototype.configureProperties = function(properties) {\n  this.walking_speed = +properties.walking_speed;\n  this.jumping_speed = +properties.jumping_speed;\n  this.bouncing = +properties.bouncing;\n  this.score = 0;\n};\n\nPlayerSprite.prototype.setupAnimations = function() {\n  this.animations.add('left', [0, 1, 2, 3], 10, true);\n  this.animations.add('right', [5, 6, 7, 8], 10, true);\n  this.animations.add('jump', [4]);\n  this.animations.add('none');\n};\n\nmodule.exports = PlayerSprite;\n","'use strict';\n\nfunction ControlsMenu() {}\n\nControlsMenu.prototype = {\n  preload: function() {\n    this.load.image('controls', 'images/buttons/Controls.png');\n    this.load.image('backBtn', 'images/buttons/BackButton.png');\n  },\n\n  create: function() {\n    var me = this;\n\n    var btnX = this.game.world.centerX;\n    var btnY = this.game.world.centerY;\n\n    // add controls menu\n    var controls = this.game.add.sprite(btnX, btnY - 25, 'controls');\n    controls.anchor.set(0.5);\n    controls.inputEnabled = true;\n\n    // add back button\n    var backBtn = this.game.add.sprite(btnX, btnY + 255, 'backBtn');\n    backBtn.anchor.set(0.5);\n    backBtn.inputEnabled = true;\n    backBtn.events.onInputDown.add(returnToMenu, this);\n\n    function returnToMenu() {\n      me.game.state.start('MainMenu');\n    }\n  }\n}\n\nmodule.exports = ControlsMenu;\n","'use strict';\n\nfunction GameOver() {}\n\nGameOver.prototype = {\n  init: function(winner, loser, myId) {\n    this.winnerId = winner.id;\n    this.loserId = loser.id;\n    this.myId = myId;\n  },\n\n  preload: function() {\n    this.load.image('playAgainBtn', 'images/buttons/PlayAgainButton.png');\n    this.load.image('mainMenuBtn', 'images/buttons/MainMenuButton.png')\n  },\n\n  create: function() {\n    var text;\n    if(this.winnerId == this.myId) {\n      text = 'You Win!';\n    }\n    else {\n      text = 'You Lose!';\n    }\n\n    var gameOverText = this.game.add.text(this.game.world.centerX, this.game.world.centerY - 200, text);\n    gameOverText.anchor.set(0.5);\n    gameOverText.align = 'center';\n    gameOverText.font = 'Arial';\n    gameOverText.fontWeight = 'bold';\n    gameOverText.fontSize = 70;\n    gameOverText.fill = 'black';\n    gameOverText.setShadow(5, 5, 'rgb(68, 68, 68)', 5)\n\n    // Start x and y positions for menu buttons\n    var btnX = this.game.world.centerX;\n    var btnY = this.game.world.centerY - 20;\n\n    // Add play again button\n    var playAgainBtn = this.game.add.sprite(btnX, btnY - 10, 'playAgainBtn');\n    playAgainBtn.anchor.set(0.5);\n    playAgainBtn.inputEnabled = true;\n    playAgainBtn.events.onInputDown.add(playAgain, this);\n    playAgainBtn.alpha = 0.75;\n\n    // Add return to main menu button\n    var mainMenuBtn = this.game.add.sprite(btnX, btnY + 45, 'mainMenuBtn');\n    mainMenuBtn.anchor.set(0.5);\n    mainMenuBtn.inputEnabled = true;\n    mainMenuBtn.events.onInputDown.add(returnToMainMenu, this);\n\n    function playAgain() {\n      // this.game.state.start('LoadingState');\n    }\n\n    function returnToMainMenu() {\n      this.game.state.start('MainMenu', true, true, false);\n    }\n  }\n};\n\nmodule.exports = GameOver;\n","'use strict';\n\nvar level_data;\n\nvar MatchMakerManager = require('client/utils/MatchMakerManager');\n\nfunction LoadingState() {}\n\nLoadingState.prototype = {\n  init: function() {\n    this.displaySearchingScreen();\n    this.gameInfo = {};\n    this.mainPlayer = {};\n    this.searchForGame();\n  },\n\n  preload: function() {\n    this.load.text('level1', 'maps/map1.json');\n  },\n\n  create: function() {\n    var level_text;\n    level_text = this.game.cache.getText('level1');\n    level_data = JSON.parse(level_text);\n  },\n\n  displaySearchingScreen: function() {\n    var seachingText = 'Searching for Game...';\n    var text = this.game.add.text(this.game.world.centerX, this.game.world.centerY, seachingText);\n\n    text.anchor.set(0.5);\n    text.align = 'center';\n\n    text.font = 'Arial';\n    text.fontWeight = 'bold';\n    text.fontSize = 70;\n    text.fill = 'black';\n    text.setShadow(5, 5, 'rgb(68, 68, 68)', 5);\n  },\n\n  searchForGame: function() {\n    var me = this;\n\n    MatchMakerManager.setGameFoundCallback(function(newGame) {\n      me.gameInfo = newGame;\n      me.gameInfo.myId = MatchMakerManager.getPid();\n      level_data.players.player1.id = me.gameInfo.player1;\n      level_data.players.player2.id = me.gameInfo.player2;\n      MatchMakerManager.disconnect();\n      me.game.state.start('PlayState', true, false, me.gameInfo, level_data);\n    });\n\n\n    MatchMakerManager.connect(this.mainPlayer);\n  }\n};\n\nmodule.exports = LoadingState;\n","'use strict';\n\nvar MenuCreator = require('client/utils/MenuCreator');\n\nvar nickNameInput;\nvar eleToRemove = [];\n\nfunction MainMenu() {}\n\nMainMenu.prototype = {\n  preload: function() {\n    this.load.image('playBtn', 'images/buttons/PlayButton.png');\n    this.load.image('controlsBtn', 'images/buttons/ControlsButton.png');\n    this.load.image('settingsBtn', 'images/buttons/SettingButton.png');\n    this.load.image('loginBtn', 'images/buttons/LoginButton.png');\n    this.load.image('registerBtn', 'images/buttons/RegisterButton.png');\n  },\n\n  create: function() {\n    this.game.stage.backgroundColor = 0x009933;\n\n    this.game.stage.disableVisibilityChange = true;\n\n    //this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;\n    this.scale.pageAlignHorizontally = true;\n    this.scale.pageAlignVertically = true;\n\n    MenuCreator.init(this.game);\n    this.showMainMenu();\n  },\n\n  showMainMenu: function() {\n    var me = this;\n\n    // Create Ninja Ladder main menu title\n    var title = 'Ninja Ladder';\n    var title = this.game.add.text(this.game.world.centerX, this.game.world.centerY - 200, title);\n    title.anchor.set(0.5);\n    title.align = 'center';\n    title.font = 'Arial';\n    title.fontWeight = 'bold';\n    title.fontSize = 70;\n    title.fill = 'black';\n    title.setShadow(5, 5, 'rgb(68, 68, 68)', 5);\n\n    // Create nickname text input\n    var panel = MenuCreator.mediumPanel(180, 120, 'game-login-panel');\n    var form = MenuCreator.form(playGame);\n    var blockInput = MenuCreator.inputBlock();\n    nickNameInput = MenuCreator.inputWithLabel(blockInput, '', 100, 200);\n    nickNameInput.x = 500;\n    form.appendChild(blockInput);\n    panel.appendChild(form);\n\n    eleToRemove.push(panel);\n\n    // Start x and y positions for menu buttons\n    var btnX = this.game.world.centerX;\n    var btnY = this.game.world.centerY - 20;\n\n    // Add play button\n    var playBtn = this.game.add.sprite(btnX, btnY - 10, 'playBtn');\n    playBtn.anchor.set(0.5);\n    playBtn.inputEnabled = true;\n    playBtn.events.onInputDown.add(playGame, this);\n\n    // Add controls button\n    var controlsBtn = this.game.add.sprite(btnX, btnY + 45, 'controlsBtn');\n    controlsBtn.anchor.set(0.5);\n    controlsBtn.inputEnabled = true;\n    controlsBtn.events.onInputDown.add(controlsMenu, this);\n\n    // Add settings button;\n    var settingsBtn = this.game.add.sprite(btnX, btnY + 100, 'settingsBtn');\n    settingsBtn.anchor.set(0.5);\n    settingsBtn.alpha = 0.75;\n\n    // Add login button\n    var loginBtn = this.game.add.sprite(btnX, btnY + 170, 'loginBtn');\n    loginBtn.anchor.set(0.5);\n    loginBtn.alpha = 0.75;\n\n    // Add register button\n    var registerBtn = this.game.add.sprite(btnX, btnY + 225, 'registerBtn');\n    registerBtn.anchor.set(0.5);\n    registerBtn.alpha = 0.75;\n\n    function playGame(){\n      me.game.mainPlayerName = nickNameInput.value;\n      if(me.game.mainPlayerName){\n        me.cleanElements();\n        me.game.state.start('LoadingState');\n      }\n      else {\n        var title = 'Please enter a name';\n        var title = this.game.add.text(this.game.world.centerX, this.game.world.centerY + 270, title);\n        title.anchor.set(0.5);\n        title.align = 'center';\n        title.font = 'Arial';\n        title.fontSize = 20;\n        title.fill = 'red';\n      }\n      nickNameInput.value = '';\n    }\n\n    function controlsMenu() {\n      me.cleanElements();\n      me.game.state.start('ControlsMenu');\n    }\n  },\n\n  cleanElements: function() {\n    for(var i = 0, max = eleToRemove.length; i < max; i++){\n      eleToRemove[i].remove();\n    }\n  }\n};\n\nmodule.exports = MainMenu;\n","'use strict';\n\nvar myId, otherId, me, otherPlayer;\nvar game, groups;\nvar mySword, otherSword;\nvar winner;\nvar keys = {};\nvar weapon = 'sword';\nvar directionBool = true;\n\nvar playerDirection = 1;\nvar otherPlayerDirection;\n\nvar ninjastar_rotation = 15;\nvar ninjastar_velocity = 700;\n\nvar keyCodes = {\n  'A': 65,\n  'S': 83,\n  'W': 87,\n  'D': 68,\n  'SPACE': 32,\n  'W_SWORD': 49,\n  'W_NINJASTAR': 50\n};\n\nvar NetworkManager = require('client/utils/NetworkManager');\nvar PlayerObject = require('client/objects/PlayerObject');\n\nfunction PlayState() {}\n\nPlayState.prototype = {\n  init: function(gameInfo, level_data) {\n    this.gameInfo = gameInfo;\n    this.level_data = level_data;\n    this.initKeys();\n    this.game.canvas.oncontextmenu = function(e) {e.preventDefault(); };\n    myId = gameInfo.myId;\n    otherId = getOtherPlayerId(gameInfo);\n\n    NetworkManager.connect(gameInfo);\n\n    NetworkManager.onOtherPlayerMove(function(movementInfo) {\n      updateOtherPlayer(movementInfo);\n    });\n    NetworkManager.onOtherPlayerAction(function(actionInfo) {\n      onOtherPlayerAction1(actionInfo);\n    });\n    NetworkManager.onPlayerDisconnect(function() {\n      \n    });\n  },\n\n  preload: function() {\n    var assets, asset_load, asset_key, asset;\n    assets = this.level_data.assets;\n    for(asset_key in assets) {\n      if(assets.hasOwnProperty(asset_key)) {\n        asset = assets[asset_key];\n        switch(asset.type) {\n          case \"image\":\n            this.load.image(asset_key, asset.source);\n            break;\n          case \"spritesheet\":\n            this.load.spritesheet(asset_key, asset.source, asset.frame_width, asset.frame_height, asset.frames, asset.margin, asset.spacing);\n            break;\n        }\n      }\n    }\n  },\n\n  create: function() {\n    var group_name;\n\n    this.game.add.sprite(0, 0, \"background\");\n\n    this.groups = {};\n    this.level_data.groups.forEach(function (group_name) {\n      this.groups[group_name] = this.game.add.group();\n    }, this);\n\n    this.createPlatforms();\n\n    otherPlayer = this.createPlayer(otherId);\n    me = this.createPlayer(myId);\n\n    this.cursors = this.game.input.keyboard.createCursorKeys();\n    this.game.input.onDown.add(function() {\n      this.throwNinjaStar(me.sprite, 'ninjastars1');\n    }, this);\n\n    this.game.input.reset();\n    this.game.input.onDown.add(function() {\n      this.swingSword();\n    }, this);\n\n    this.drawSwords();\n\n    game = this.game;\n    groups = this.groups;\n  },\n\n  update: function() {\n    // check player collision with platforms\n    this.game.physics.arcade.collide(me.sprite, this.groups['platforms']);\n    this.game.physics.arcade.collide(otherPlayer.sprite, this.groups['platforms']);\n    this.game.physics.arcade.collide(this.groups['ninjastars1'], this.groups['platforms'], function(ninjastar, platform) {\n      ninjastar.kill();\n    });\n    this.game.physics.arcade.collide(this.groups['ninjastars2'], this.groups['platforms'], function(ninjastar, platform) {\n      ninjastar.kill();\n    });\n    // console.log(this.game.physics.arcade.collide(mySword, otherPlayer.sprite));\n    if(weapon == 'sword') {\n      if(playerDirection == 1) {\n        var frame = me.sprite.frame;\n        if(frame == 5) {\n          mySword.angle = 55;\n        }\n        else if(frame == 6) {\n          mySword.angle = 85;\n        }\n        else if(frame == 7) {\n          mySword.angle = 45;\n        }\n      }\n      else {\n        var frame = me.sprite.frame;\n        if(frame == 3) {\n          mySword.angle = 325;\n        }\n        else if(frame == 2) {\n          mySword.angle = 305;\n        }\n        else if(frame == 1) {\n          mySword.angle = 275;\n        }\n      }\n    }\n\n    if(keys.equip_sword.isDown) {\n      weapon = 'sword';\n      mySword.alpha = 1;\n    }\n    else if(keys.equip_ninjastar.isDown) {\n      weapon = 'ninjastar';\n      mySword.alpha = 0;\n    }\n\n    // move right\n    if(me.sprite.body.velocity.x >= 0 && (keys.right.isDown ||\n                                          this.cursors.right.isDown)) {\n\n      playerDirection = 1;\n      me.sprite.body.velocity.x = me.sprite.walking_speed;\n      me.sprite.animations.play('right');\n      this.updateSword(me, 'right', mySword);\n      NetworkManager.onMainPlayerMove(getPlayerInfo(me));\n    }\n\n    // move left\n    else if(me.sprite.body.velocity.x <= 0 && (keys.left.isDown ||\n                                               this.cursors.left.isDown)) {\n\n      playerDirection = -1;\n      me.sprite.body.velocity.x = -me.sprite.walking_speed;\n      me.sprite.animations.play('left');\n      this.updateSword(me, 'left', mySword);\n      NetworkManager.onMainPlayerMove(getPlayerInfo(me));\n    }\n    // standing still\n    else {\n      me.sprite.body.velocity.x = 0;\n      me.sprite.animations.stop();\n      if(playerDirection == 1) {\n        me.sprite.frame = 5;\n      }\n      else {\n        me.sprite.frame = 2;\n      }\n\n      var playerInfo = {};\n      playerInfo.animation = 'none';\n      playerInfo.otherId = otherId;\n      NetworkManager.onMainPlayerMove(playerInfo);\n    }\n\n    // jump\n    if(me.sprite.body.touching.down && (keys.jump.isDown ||\n                                        keys.jump_space.isDown ||\n                                        this.cursors.up.isDown)) {\n\n      me.sprite.body.velocity.y = -me.sprite.jumping_speed;\n      me.sprite.animations.play('jump');\n\n      var playerInfo = {};\n      playerInfo.animation = 'jump';\n      playerInfo.otherId = otherId;\n      NetworkManager.onMainPlayerMove(playerInfo);\n    }\n\n    // check ninjastar bounds with players\n    this.checkNinjaStars('ninjastars1', otherPlayer, me);\n    this.checkNinjaStars('ninjastars2', me, otherPlayer);\n  },\n\n  createPlayer: function(id) {\n    var player = {};\n    if(this.level_data.players.player1.id == id) {\n      var startX = this.level_data.players.player1.x;\n      var startY = this.level_data.players.player1.y;\n      var properties = this.level_data.players.player1.properties;\n      player = new PlayerObject(this.game,startX, startY, true, properties);\n      player.sprite.frame = 4;\n      player.id = id;\n    }\n    else {\n      var startX = this.level_data.players.player2.x;\n      var startY = this.level_data.players.player2.y;\n      var properties = this.level_data.players.player2.properties;\n      player = new PlayerObject(this.game,startX, startY, true, properties);\n      player.sprite.frame = 4;\n      player.id = id;\n    }\n    return player;\n  },\n\n  createPlatforms: function() {\n    this.groups[\"platforms\"].enableBody = true;\n    var ground = this.groups['platforms'].create(0, this.game.world.height - 64, 'platform');\n    ground.scale.setTo(2, 2);\n    ground.body.immovable = true;\n    ground.body.allowGravity = false;\n\n    var ledge = this.groups['platforms'].create(400, 400, 'platform');\n    ledge.body.immovable = true;\n    ledge.body.allowGravity = false;\n\n    ledge = this.groups['platforms'].create(-150, 250, 'platform');\n    ledge.body.immovable = true;\n    ledge.body.allowGravity = false;\n  },\n\n  initKeys: function() {\n    keys.left = this.game.input.keyboard.addKey(keyCodes.A);\n    keys.right = this.game.input.keyboard.addKey(keyCodes.D);\n    keys.jump = this.game.input.keyboard.addKey(keyCodes.W);\n    keys.jump_space = this.game.input.keyboard.addKey(keyCodes.SPACE);\n    keys.equip_sword = this.game.input.keyboard.addKey(keyCodes.W_SWORD);\n    keys.equip_ninjastar = this.game.input.keyboard.addKey(keyCodes.W_NINJASTAR);\n  },\n\n  throwNinjaStar: function(playerSprite, group) {\n    if(weapon == 'ninjastar') {\n      var startX;\n      var startY = playerSprite.position.y + playerSprite.height/2;\n      if(playerDirection == 1) {\n        startX = playerSprite.position.x + (playerDirection*playerSprite.width);\n      }\n      else {\n        startX = playerSprite.position.x;\n      }\n      var ninjastar = this.groups[group].create(startX, startY, 'ninjastar');\n      this.game.physics.enable(ninjastar);\n      ninjastar.alive = true;\n      ninjastar.anchor.setTo(.5, .5);\n      ninjastar.outOfBoundsKill = true;\n      var x = this.game.input.x;\n      var y = this.game.input.y;\n      this.game.physics.arcade.moveToXY(ninjastar, x, y, ninjastar_velocity);\n\n      var actionInfo = {};\n      actionInfo.action = 'ninjastar';\n      actionInfo.otherId = otherId;\n      actionInfo.x = x;\n      actionInfo.y = y;\n      NetworkManager.onMainPlayerAction(actionInfo);\n    }\n  },\n\n  drawSwords: function() {\n    mySword = me.sprite.addChild(this.game.add.sprite(me.sprite.width-5, me.sprite.height-10, 'sword'));\n    otherSword = otherPlayer.sprite.addChild(this.game.add.sprite(otherPlayer.sprite.width-5, otherPlayer.sprite.height-10, 'sword'));\n\n    this.game.physics.arcade.enable(mySword);\n    this.game.physics.arcade.enable(otherSword);\n\n    mySword.anchor.set(.5, .8);\n    mySword.angle = 55;\n    mySword.scale.setTo(.8);\n\n    otherSword.anchor.set(.5, .8);\n    otherSword.angle = 55;\n    otherSword.scale.setTo(.8);\n  },\n\n  updateSword: function(player, action, sword) {\n    switch(action) {\n      case 'right':\n        if(!directionBool) {\n          sword.position.x = me.sprite.width-5;\n          sword.angle = 55;\n          directionBool = true;\n        }\n        break;\n      case 'left':\n        if(directionBool) {\n          sword.position.x = me.sprite.width-25;\n          sword.angle = 305;\n          directionBool = false;\n        }\n        break;\n      case 'default':\n        break;\n    }\n  },\n\n  checkNinjaStars: function(group, player, winner) {\n    if(this.groups[group].countLiving()) {\n      this.groups[group].forEach(function(ninjastar) {\n        ninjastar.angle += ninjastar_rotation;\n        var posX = ninjastar.position.x;\n        var posY = ninjastar.position.y;\n        if(posX < (player.sprite.x + player.sprite.width) &&\n           posX > (player.sprite.x) &&\n           posY > (player.sprite.y) &&\n           posY < (player.sprite.y + player.sprite.height)) {\n             removeSprite(player.sprite);\n             removeSprite(ninjastar);\n             win(winner);\n        }\n      });\n    }\n  },\n\n  swingSword: function() {\n    if(playerDirection == 1) { // right\n\n    }\n    else { // left\n\n    }\n  }\n};\n\nfunction onOtherPlayerAction1(actionInfo) {\n  switch(actionInfo.action) {\n    case 'ninjastar':\n      var startX;\n      var startY = otherPlayer.sprite.position.y + otherPlayer.sprite.height/2;\n      if(playerDirection == 1) {\n        startX = otherPlayer.sprite.position.x + (playerDirection*otherPlayer.sprite.width);\n      }\n      else {\n        startX = otherPlayer.sprite.position.x;\n      }\n      var ninjastar = groups['ninjastars2'].create(startX, startY, 'ninjastar');\n      game.physics.enable(ninjastar);\n      ninjastar.alive = true;\n      ninjastar.anchor.setTo(.5, .5);\n      game.physics.arcade.moveToXY(ninjastar, actionInfo.x, actionInfo.y, ninjastar_velocity);\n      break;\n    default:\n      console.log('error: no action');\n  }\n};\n\nfunction getOtherPlayerId(gameInfo) {\n  if(myId == gameInfo.player1) {\n    return gameInfo.player2;\n  }\n  else {\n    return gameInfo.player1;\n  }\n};\n\nfunction updateOtherPlayer(movementInfo) {\n  if(movementInfo.animation == 'right') {\n    otherPlayer.sprite.position.x = movementInfo.x;\n    otherPlayer.sprite.position.y = movementInfo.y;\n    otherPlayer.sprite.animations.play('right');\n    otherPlayer.direction = 1;\n    PlayState.prototype.updateSword(otherPlayer, 'right', otherSword);\n  }\n  else if(movementInfo.animation == 'left') {\n    otherPlayer.sprite.position.x = movementInfo.x;\n    otherPlayer.sprite.position.y = movementInfo.y;\n    otherPlayer.sprite.animations.play('left');\n    otherPlayer.direction = -1;\n    PlayState.prototype.updateSword(otherPlayer, 'left', otherSword);\n  }\n  else if(movementInfo.animation == 'jump') {\n    otherPlayer.sprite.body.velocity.y = -otherPlayer.sprite.jumping_speed;\n  }\n  else if(movementInfo.animation == 'none') {\n    otherPlayer.sprite.body.velocity.x = 0;\n    otherPlayer.sprite.animations.stop();\n    if(otherPlayer.direction == 1) {\n      otherPlayer.sprite.frame = 5;\n    }\n    else {\n      otherPlayer.sprite.frame = 2;\n    }\n  }\n};\n\nfunction getPlayerInfo(player) {\n  var playerInfo = {};\n  playerInfo.x = me.sprite.position.x;\n  playerInfo.y = me.sprite.position.y;\n  playerInfo.animation = me.sprite.animations.name;\n  playerInfo.otherId = otherId;\n  return playerInfo;\n};\n\nfunction removeSprite(sprite) {\n  sprite.destroy();\n};\n\nfunction win(player) {\n  winner = player;\n  var loser = otherPlayerId(winner);\n  keys = {};\n  me.game.state.start('GameOver', true, true, winner, loser, myId);\n};\n\nfunction otherPlayerId(winner) {\n  if(me.id == winner.id) {\n    return otherPlayer;\n  }\n  else {\n    return me;\n  }\n};\n\nmodule.exports = PlayState;\n","'use strict';\n\nvar mainPlayer;\nvar matchmaker;\nvar playerPool = [];\n\nvar onGameFoundCallback;\n\nvar MatchMakerManager = {\n  connect: function(player) {\n    mainPlayer = player;\n\n    matchmaker = io.connect('http://localhost:9194');\n    matchmaker.on('connect', onConnectedToServer);\n\n    this.configureIncomingTraffic();\n  },\n\n  configureIncomingTraffic: function() {\n    matchmaker.on('MATCHMAKER_PLAYER_ID', onReceiveId);\n    matchmaker.on('MATCHMAKER_GAME_FOUND', onGameFound);\n    matchmaker.on('MATCHMAKER_PING', onPingRequest);\n\n  },\n\n  setGameFoundCallback: function(callback) {\n    onGameFoundCallback = callback;\n  },\n\n  getPid: function() {\n    return mainPlayer.id;\n  },\n\n  disconnect: function() {\n    matchmaker.emit('disconnect');\n  }\n}\n\nfunction onConnectedToServer() {\n  MatchMakerManager.connected = true;\n  matchmaker.emit('CLIENT_REQUEST_ID');\n};\n\nfunction onReceiveId(id) {\n  mainPlayer.id = id;\n  console.log('received id: ' + id);\n  matchmaker.emit('CLIENT_REQUEST_GAME', mainPlayer);\n};\n\nfunction onPingRequest() {\n  matchmaker.emit('CLIENT_PING');\n};\n\nfunction onGameFound(matchInfo) {\n  onGameFoundCallback(matchInfo);\n};\n\nmodule.exports = MatchMakerManager;\n","'use strict';\n\nvar containerElement, verticalOffset = 0, horizontalOffset = 0;\n\nfunction getY(y){\n    return y - verticalOffset;\n}\n\nfunction getX(x){\n    return x - horizontalOffset;\n}\n\n\nmodule.exports = {\n    init: function(game){\n        containerElement = document.getElementById(game.parent);\n        verticalOffset = game.height;\n    },\n\n    mediumPanel: function (x, y, cssClass){\n        if(!cssClass){\n            cssClass = '';\n        }\n        var panel = document.createElement('div');\n        panel.className = 'gui-panel gui-panel-medium ' + cssClass;\n        panel.style.left = getX(x) + 'px';\n        panel.style.top = getY(y) + 'px';\n\n        containerElement.appendChild(panel);\n\n        return panel;\n    },\n\n    form: function(onSaveCallback){\n        var form = document.createElement('form');\n        form.onsubmit= function(){\n            onSaveCallback();\n\n            return false;\n        };\n\n        return form;\n    },\n\n    inputBlock: function(){\n        var blockInput = document.createElement('div');\n        blockInput.className='game-input-block';\n        return blockInput;\n    },\n\n    inputWithLabel: function(parent, label, x, y){\n        var nameLabel = document.createElement('div');\n        nameLabel.className='game-gui-label';\n        nameLabel.innerHTML = label;\n\n\n        var nameInput = document.createElement('input');\n        nameInput.type = 'text';\n        nameInput.className = 'game-gui-input';\n        nameInput.placeholder = 'name';\n\n        parent.appendChild(nameLabel);\n        parent.appendChild(nameInput);\n\n        return nameInput;\n    },\n\n    // createButton: function(label, cssClass){\n    //     var button = document.createElement('button');\n    //     button.className = cssClass;\n    //\n    //     button.innerHTML = label;\n    //     return button;\n    // }\n};\n","'use strict';\n\nvar serverSocket, mainPlayerId;\nvar gameInfo;\n\nvar onPlayerDisconnectCallback;\nvar onOtherPlayerMoveCallback;\nvar onOtherPlayerActionCallback;\n\nvar NetworkManager = {\n  connected: false,\n  gameInfo: {},\n  connect: function(gameInfo) {\n    mainPlayerId = gameInfo.myId;\n    serverSocket = io.connect('http://localhost:9192');\n    serverSocket.on('connect', onConnectedToServer);\n    serverSocket.emit('CLIENT_GAME_INFO', gameInfo);\n\n    this.configureIncomingTraffic();\n  },\n\n  configureIncomingTraffic: function(){\n    serverSocket.on('SERVER_PLAYER_DISCONNECT', onPlayerDisconnect);\n    serverSocket.on('SERVER_OTHER_PLAYER_MOVE', onPlayerMove);\n    serverSocket.on('SERVER_PLAYER_ACTION', onPlayerAction);\n  },\n\n  onOtherPlayerMove: function(callback) {\n    onOtherPlayerMoveCallback = callback;\n  },\n\n  onOtherPlayerAction: function(callback) {\n    onOtherPlayerActionCallback = callback;\n  },\n\n  onPlayerDisconnect: function(callback) {\n    onPlayerDisconnectCallback = callback;\n  },\n\n  onMainPlayerMove: function(playerInfo) {\n    serverSocket.emit('CLIENT_PLAYER_MOVE', playerInfo);\n  },\n\n  onMainPlayerAction: function(actionInfo) {\n    serverSocket.emit('CLIENT_PLAYER_ACTION', actionInfo);\n  }\n};\n\nfunction onConnectedToServer() {\n  NetworkManager.connected = true;\n  serverSocket.emit('CLIENT_CONNECTED');\n};\n\nfunction onPlayerMove(playerInfo) {\n  onOtherPlayerMoveCallback(playerInfo);\n};\n\nfunction onPlayerAction(actionInfo) {\n  onOtherPlayerActionCallback(actionInfo);\n};\n\nfunction onPlayerDisconnect(player) {\n  onPlayerDisconnectCallBack(player);\n};\n\nmodule.exports = NetworkManager;\n"]}